

const verify = require('@noble/ed25519').verify
const fs = require('fs');
const { PublicKey } = require('@solana/web3.js');
const spawn = require('child_process').spawn;
const axios = require('axios')
let messages = []
const express = require('express');
const app = express();
app.use(express.static('public'))
const port = 80;
const st = new Date().getTime()/1000
const bs58 = require('bs58');
const NostrTools = require('nostr-tools');
const cors = require('cors');
const bodyParser = require('body-parser');
app.use(cors());
let somecoolshit = {}
let dones = []
let donetx = []
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
let donets =[]
const isProduction = true   

async function getLatestOrders(limit, nostrLimit = 20, filters = {}) {
    console.log(1);
      nostrRelay = NostrTools.relayInit(nostrRelayUrl);
      nostrRelay.connect();
    await nostrRelay.connect();
    const latestOrders = [];
    const inscriptionDataCache = {};

    const orders = await nostrRelay.list([
      {
        kinds: [nostrOrderEventKind],
        limit: nostrLimit,
        ...filters,
      },
    ]);

    for (const order of orders) {
        try {
      console.log(order);
        latestOrders.push(order.content);{}

        if (latestOrders.length >= limit) {
          break;
        }
      } catch (e) {
        console.error(e);
      }
    }

    return latestOrders;
  }
const ordinalsExplorerUrl = isProduction
  ? 'https://8529-20-232-28-243.ngrok.io'
  : 'https://explorer-signet.openordex.org';
const baseMempoolUrl = isProduction
  ? 'https://mempool.space'
  : 'https://mempool.space/signet';
const networkName = isProduction ? 'mainnet' : 'signet';
const baseMempoolApiUrl = `${baseMempoolUrl}/api`;
const bitcoinPriceApiUrl = 'https://blockchain.info/ticker?cors=true';

const nostrRelayUrl = 'wss://nostr.openordex.org';
const collectionsRepo = 'ordinals-wallet/ordinals-collections';
const exchangeName = 'candyMachine';
const feeLevel = 'hourFee'; // "fastestFee" || "halfHourFee" || "hourFee" || "economyFee" || "minimumFee"
const nostrOrderEventKind = 666

app.post('/postyposty', (req, res) => {


    var { message, signature, publicKey, sigmessage, collection } = req.body;
   // console.log(req.body);
publicKey = new PublicKey(publicKey);
if (!verify(bs58.decode(signature),bs58.decode( sigmessage ), publicKey.toBytes())) throw new Error('Invalid signature!');
messages.push({ message: (message), signature, publicKey });
fs.writeFileSync('messages.json', JSON.stringify(messages))
new Promise(async (resolve, reject) => {
    try {

        nostrRelay = NostrTools.relayInit(nostrRelayUrl);
        nostrRelay.connect();
      await nostrRelay.connect();

      let sk = NostrTools.generatePrivateKey();
      let pk = NostrTools.getPublicKey(sk);

      let event = {
        kind: nostrOrderEventKind,
        pubkey: pk,
        created_at: Math.floor(Date.now() / 1000),
        tags: [
        ],
        content: JSON.stringify({ message, signature, publicKey, sigmessage, collection } )
      };
      console.log(event);
      event.id = NostrTools.getEventHash(event);
      event.sig = NostrTools.signEvent(event, sk);

      let pub = nostrRelay.publish(event);
      pub.on('ok', () => {
        console.log(`${nostrRelay.url} has accepted our order`);
        resolve();
      });
      pub.on('failed', (reason) => {
        reject(`Failed to publish PSBT to ${relay.url}: ${reason}`);
      });
    } catch (e) {
      console.log(e)
      reject(e);
    }
  });
res.send('done')

});
var doing = false 
setInterval(async function(){
  var ccc = 0
    let ms = await getLatestOrders(1000000);
for (var object of ms) {
    if (!dones.includes(object)){
      try {
     var { message, signature, publicKey, collection } = JSON.parse(object); 
   console.log(object);

publicKey = new PublicKey(publicKey);

const  url = "https://api.helius.xyz/v0/addresses/"+publicKey.toBase58()+"/transactions?api-key=8913a285-a5ef-4c35-8d80-03fb276eff2f"
const parseTransactions = async () => {
  const { data } = await axios.get(url)
   // console.log("transactions: ", data)
   for (var tx of data ) {
       if (tx.type == 'TRANSFER'){
       // console.log(tx.nativeTransfers)
        for (var transfer of tx.nativeTransfers) {
if (!Object.keys(somecoolshit).includes(tx.fromUserAccount)){
somecoolshit[tx.fromUserAccount] = 0
}
            if (!doing && ccc < 1 && somecoolshit[tx.fromUserAccount] < 10 && tx.timestamp > st && !donetx.includes(transfer) &&!donets.includes(tx.timestamp) && transfer.toUserAccount == "BjNXgzwaCPVN4KvHXthBsVWkWYnCUpebB2NQZTpxuurF" && transfer.amount >= 0.07 * 10 ** 9){
//console.log(message)
doing = true
ccc++

//somecoolshit[tx.fromUserAccount]++
fs.writeFileSync('scs.json', JSON.stringify(somecoolshit))
donets.push(tx.timestamp)
const lines = message.split('\n')
const address = lines[0]
const fee = lines[1]
// glob the ~/Released directory and select a random .png 
for (var file of fs.readdirSync ('/home/ubuntu/' + collection)) {
    if (file.endsWith('.webp')) {
        var file = file;
        break;
    }

}
  
           // winner winer chickum dinner   
// spawn subprocess sudo ./target/release/ord wallet inscribe --destination $(address) --fee-rate 37 ~/released/$(file)
dones.push(object)
//fs.writeFileSync('dones.json',JSON.stringify(dones))
donetx.push(transfer)
//fs.writeFileSync('donetx.json',JSON.stringify(donetx))

// fs move the file to /home/ubuntu/Inscribed
/*fs.rename('/home/ubuntu/Released/' + file, '/home/ubuntu/Inscribed/' + file, (err) => {
    if (err) {
        console.log(err);
        return;
    }
    console.log('File moved!');
})*/
try {
    fs.rename('/home/ubuntu/'+collection+'/' + file, '/home/ubuntu/Inscribed/' + file, (err) => {
        if (err) {
            console.log(err);
            return;
        }
        console.log('File moved!');
    })
    let thedata 
let ordy = spawn('/home/ubuntu/ord/target/release/ord', ['--cookie-file', '/media/ubuntu/.cookie', '--index', '/media/ubuntu/indexes/index2','wallet', 'inscribe', '--destination', address, '--fee-rate', fee, '/home/ubuntu/Inscribed/' + file])
ordy.stdout.on('data', (data) => {
  thedata = data
  console.log(`Number of files ${data}`);
});
ordy.stderr.on('data', (data) => {

  console.error(`child stderr:\n${data}`);
  console.error(`writing file to errors/${address}${tx.timestamp.toString()}.txt`)
  fs.writeFileSync('errors/' + address + '-' + tx.timestamp.toString() + '.txt', file)
 doing = false
   
try {
dones.push(object)
//fs.writeFileSync('dones.json',JSON.stringify(dones))
donetx.push(transfer)
//fs.writeFileSync('donetx.json',JSON.stringify(donetx))
} catch (err){

}


});
ordy.on('exit', function (code, signal) {
 doing = false
 new Promise(async (resolve, reject) => {
  try {

      nostrRelay = NostrTools.relayInit(nostrRelayUrl);
      nostrRelay.connect();
    await nostrRelay.connect();

    let sk = NostrTools.generatePrivateKey();
    let pk = NostrTools.getPublicKey(sk);

    let event = {
      kind: nostrOrderEventKind+1,
      pubkey: pk,
      created_at: Math.floor(Date.now() / 1000),
      tags: [
      ],
      content: JSON.stringify({ message, signature, publicKey, sigmessage, collection, file, thedata } )
    };
    console.log(event);
    event.id = NostrTools.getEventHash(event);
    event.sig = NostrTools.signEvent(event, sk);

    let pub = nostrRelay.publish(event);
    pub.on('ok', () => {
      console.log(`${nostrRelay.url} has accepted our order`);
      resolve();
    });
    pub.on('failed', (reason) => {
      reject(`Failed to publish PSBT to ${relay.url}: ${reason}`);
    });
  } catch (e) {
    console.log(e)
    reject(e);
  }
});

})
} catch (e){
fs.writeFileSync(address + '.txt', file)
try {
dones.push(object)
//fs.writeFileSync('dones.json',JSON.stringify(dones))
donetx.push(transfer)
//fs.writeFileSync('donetx.json',JSON.stringify(donetx))
} catch (err){

}
try {
 
   axios.post("https://in.apolloni.us/webhook", {
        "address":  address,
        "file": file
        })
}
catch (err){
    console.log(err)
}
}

          }
        }
       }
   }


}
parseTransactions()
/*
console.log(message)
const lines = message.split('\n')
const address = lines[0]
const fee = lines[1]
// glob the ~/Released directory and select a random .png 
for (var file in fs.readdirSync ('/home/ubuntu/Released')) {
    if (file.endsWith('.webp')) {
        var file = file;
        break;
    }

}

// spawn subprocess sudo ./target/release/ord wallet inscribe --destination $(address) --fee-rate 37 ~/released/$(file)
dones.push(object)
// fs move the file to /home/ubuntu/Inscribed
fs.rename('/home/ubuntu/Released/' + file, '/home/ubuntu/Inscribed/' + file, (err) => {
    if (err) {
        console.log(err);
        return;
    }
    console.log('File moved!');
});
spawn('sudo', ['../ordcandy/target/release/ord', 'wallet', 'inscribe', '--destination', address, '--fee-rate', fee, '/home/ubuntu/Released/' + file])
*/


} catch (err){
 console.log(err)     
}
}
}
}, 15000)

app.listen(port, () => console.log(`Example app listening on port ${port}!`));
